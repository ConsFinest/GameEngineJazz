#ifdef VERTEX                                 
                                              
attribute vec3 a_Position;                    
attribute vec2 a_TexCoord;                    
attribute vec3 a_Normal;                      
                                              
uniform mat4 u_Projection;                    
uniform mat4 u_Model;  
uniform mat4 u_View;                       
                                              
varying vec3 v_Normal;                        
varying vec2 v_TexCoord;
varying vec3 v_FragPos;                      
                                              
void main()                                   
{    
	v_Normal = mat3(u_Model) * a_Normal;  
	v_FragPos = vec3(u_Model * vec4(a_Position, 1.0));                                    
 	gl_Position = u_Projection * u_View * u_Model * vec4(a_Position, 1);            
                                              
                         
	v_TexCoord = a_TexCoord;                    
}                                             
                                              
#endif                                        
#ifdef FRAGMENT                               
                                              
uniform sampler2D u_Texture; 
uniform vec3 u_LightPos;  
uniform vec3 u_LightColor;

//material parameters
uniform vec3 u_Albedo;
uniform float u_Metallic;
uniform float u_Roughness;
uniform float u_Ao;  

uniform vec3 u_CamPos;    

const float PI = 3.14159265359;        
                                              
varying vec3 v_Normal;                        
varying vec2 v_TexCoord;
varying vec3 v_FragPos;                      
      
float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);
                                        
void main()                                   
{           
	vec4 tex = texture2D(u_Texture, v_TexCoord);

	vec3 N = normalize(v_Normal);
	vec3 V = normalize(u_CamPos - v_FragPos); 

	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, u_Albedo, u_Metallic);
	           
    // reflectance equation
    vec3 Lo = vec3(0.0);
	
	
	vec3 L = normalize(u_LightPos - v_FragPos);
    vec3 H = normalize(V + L);
	float distance = length(u_LightPos - v_FragPos);
	float attenuation = 1.0/(distance * distance);
	vec3 radiance = u_LightColor * attenuation;

	float NDF = DistributionGGX(N,H, u_Roughness);
	float G = GeometrySmith(N,V,L, u_Roughness);
	vec3 F = fresnelSchlick(max(dot(H,V), 0.0), F0);

	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - u_Metallic;

	vec3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0001) * max(dot(N, L), 0.0001);
	vec3 specular     = numerator / max(denominator, 0.001);  
            
    //add to outgoing radiance Lo
	float NdotL = max(dot(N, L), 0.00001);                
	Lo += (kD * u_Albedo / PI + specular) * radiance * NdotL; 
	
  	vec3 ambient = vec3(0.03) * u_Albedo * u_Ao;
   	vec3 color = ambient + Lo;
		
	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2));  
   

	gl_FragColor = tex * vec4(color, 1.0);

	if(gl_FragColor.x == 9) gl_FragColor.x = v_Normal.x;  
}  

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0001);
    float NdotL = max(dot(N, L), 0.0001);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
} 
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}                                           
                                              
#endif                                        